import React, { useState } from 'react';

const TreeNode = ({ node, fetchChildren }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [children, setChildren] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const handleToggle = async () => {
    if (node.children && node.children.length > 0) {
      setIsExpanded(!isExpanded);
      return; // Children already loaded
    }

    if (!children && !isLoading) { // Only fetch if not already fetched or loading
      setIsLoading(true);
      try {
        const fetchedChildren = await fetchChildren(node.id); // Pass node.id to API
        setChildren(fetchedChildren);
        setIsExpanded(true); // Expand after loading
      } catch (error) {
        console.error("Error fetching children:", error);
        // Handle error, e.g., display a message
      } finally {
        setIsLoading(false);
      }
    } else if (children) {
        setIsExpanded(!isExpanded)
    }
  };

  return (
    <div>
      <div
        className="flex items-center cursor-pointer"
        onClick={handleToggle}
      >
        {(node.children || children) && ( // Show toggle if has children or loaded children
          <svg
            xmlns="http://www.w3.org/2000/svg"
            className={`h-5 w-5 transition-transform duration-200 ${
              isExpanded ? 'rotate-90' : ''
            } ${isLoading ? 'animate-spin' : ''}`} // Add spin animation while loading
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M19 9l-7 7-7-7"
            />
          </svg>
        )}
        <span className="ml-2">{node.name}</span>
        {isLoading && <span className="ml-2">Loading...</span>} {/* Loading indicator */}

      </div>
      {isExpanded && (children || node.children) && ( // Render children if loaded
        <div className="ml-6">
          {(children || node.children).map((child) => (
            <TreeNode key={child.id || child.name} node={child} fetchChildren={fetchChildren} /> // Use child.id if available
          ))}
        </div>
      )}
    </div>
  );
};

const TreeView = ({ apiUrl }) => {
  const [treeData, setTreeData] = useState(null);
  const [isLoadingRoot, setIsLoadingRoot] = useState(true);

  const fetchChildren = async (parentId) => {
    try {
        const response = await fetch(`${apiUrl}?parentId=${parentId}`); // Use parentId in API call
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return await response.json();
    } catch (error) {
        console.error("Error fetching children:", error);
        throw error;
    }
  }

  React.useEffect(() => {
      const getRootData = async () => {
          try {
              const data = await fetchChildren(null); // Fetch root nodes (parentId null or undefined)
              setTreeData(data);
          } catch (error) {
              console.error("Error fetching root data:", error);
          } finally {
              setIsLoadingRoot(false);
          }
      }
      getRootData();
  }, [apiUrl]);

  if (isLoadingRoot) {
      return <div>Loading...</div>
  }

  if (!treeData) {
      return <div>Error loading data.</div>
  }

  return (
    <div className="p-4 bg-white rounded-md shadow-md">
      {treeData.map((node) => (
        <TreeNode key={node.id || node.name} node={node} fetchChildren={fetchChildren} />
      ))}
    </div>
  );
};

export default TreeView;
