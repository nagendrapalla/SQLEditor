import React, { useState, useMemo } from "react";
import {
  useReactTable,
  getCoreRowModel,
  ColumnDef,
  flexRender,
} from "@tanstack/react-table";

const data = Array.from({ length: 100 }, (_, i) => ({
  id: i + 1,
  name: `User ${i + 1}`,
  age: 20 + (i % 30),
  location: ["New York", "London", "Tokyo", "Paris"][i % 4],
}));

const columns: ColumnDef<typeof data[number]>[] = [
  { accessorKey: "id", header: "ID" },
  { accessorKey: "name", header: "Name" },
  { accessorKey: "age", header: "Age" },
  { accessorKey: "location", header: "Location" },
];

export default function PaginatedTable() {
  const [pageIndex, setPageIndex] = useState(0);
  const pageSize = 10; // Fixed page size
  const totalPages = Math.ceil(data.length / pageSize);

  // Slice data for the current page
  const paginatedData = useMemo(() => {
    const start = pageIndex * pageSize;
    return data.slice(start, start + pageSize);
  }, [pageIndex]);

  const table = useReactTable({
    data: paginatedData,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  // Dynamic page buttons logic (Show at least 5 pages)
  const getPaginationButtons = () => {
    const maxPages = 5; // At least 5 page numbers visible
    const buttons = [];
    let startPage = Math.max(0, pageIndex - Math.floor(maxPages / 2));
    let endPage = Math.min(totalPages - 1, startPage + maxPages - 1);

    // Adjust start if we are near the end
    if (endPage - startPage + 1 < maxPages) {
      startPage = Math.max(0, endPage - maxPages + 1);
    }

    for (let i = startPage; i <= endPage; i++) {
      buttons.push(
        <button
          key={i}
          className={`px-3 py-1 rounded ${
            pageIndex === i ? "bg-blue-500 text-white" : "bg-gray-300"
          }`}
          onClick={() => setPageIndex(i)}
        >
          {i + 1}
        </button>
      );
    }

    return buttons;
  };

  return (
    <div className="max-h-[500px] overflow-auto border rounded-lg shadow-lg">
      <table className="w-full border-collapse">
        <thead className="sticky top-0 bg-blue-500 text-white">
          {table.getHeaderGroups().map((headerGroup) => (
            <tr key={headerGroup.id}>
              {headerGroup.headers.map((header) => (
                <th key={header.id} className="p-3 text-left">
                  {flexRender(header.column.columnDef.header, header.getContext())}
                </th>
              ))}
            </tr>
          ))}
        </thead>
        <tbody className="bg-white divide-y">
          {table.getRowModel().rows.map((row) => (
            <tr key={row.id} className="hover:bg-gray-100">
              {row.getVisibleCells().map((cell) => (
                <td key={cell.id} className="p-3">
                  {flexRender(cell.column.columnDef.cell, cell.getContext())}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>

      {/* Pagination Controls */}
      <div className="flex justify-center items-center gap-2 p-4 bg-gray-100 border-t">
        <button
          className="px-3 py-1 bg-gray-300 rounded disabled:opacity-50"
          onClick={() => setPageIndex(0)}
          disabled={pageIndex === 0}
        >
          First
        </button>

        <button
          className="px-3 py-1 bg-gray-300 rounded disabled:opacity-50"
          onClick={() => setPageIndex((prev) => Math.max(prev - 1, 0))}
          disabled={pageIndex === 0}
        >
          Prev
        </button>

        {/* Page Numbers */}
        {getPaginationButtons()}

        <button
          className="px-3 py-1 bg-gray-300 rounded disabled:opacity-50"
          onClick={() => setPageIndex((prev) => Math.min(prev + 1, totalPages - 1))}
          disabled={pageIndex >= totalPages - 1}
        >
          Next
        </button>

        <button
          className="px-3 py-1 bg-gray-300 rounded disabled:opacity-50"
          onClick={() => setPageIndex(totalPages - 1)}
          disabled={pageIndex >= totalPages - 1}
        >
          Last
        </button>
      </div>
    </div>
  );
}
