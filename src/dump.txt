function cleanSQL(sql) {
  // 1. Remove comments
  sql = sql.replace(/--.*$/gm, ''); // Single-line comments
  sql = sql.replace(/\/\*[\s\S]*?\*\//g, ''); // Multi-line comments

  // 2. Normalize whitespace
  sql = sql.replace(/\s+/g, ' '); // Collapse multiple spaces/newlines
  sql = sql.trim(); // Remove leading/trailing whitespace

  // 3. Uppercase keywords (optional)
  const keywords = ['SELECT', 'FROM', 'WHERE', 'GROUP BY', 'ORDER BY', 'HAVING', 'JOIN', 'INNER', 'LEFT', 'RIGHT', 'FULL', 'ON', 'AND', 'OR', 'NOT', 'IN', 'BETWEEN', 'LIKE', 'LIMIT', 'OFFSET', 'AS', 'DISTINCT', 'CREATE', 'TABLE', 'INSERT', 'UPDATE', 'DELETE', 'ALTER', 'DROP'];
  const keywordRegex = new RegExp(`\\b(${keywords.join('|')})\\b`, 'gi');
  sql = sql.replace(keywordRegex, (match) => match.toUpperCase());

  // 4. Basic indentation (more complex, requires parsing for perfect result)
  // This is a simplified example and won't handle all cases perfectly.
  sql = sql.replace(/;\s*$/g, ''); // Remove trailing semicolon (if present)
  let indentLevel = 0;
  sql = sql.split('\n').map(line => {
    line = line.trim();
    if (line.startsWith(')')) indentLevel--;
    const indentedLine = '  '.repeat(indentLevel) + line;
    if (line.endsWith('(') || line.endsWith(',')) indentLevel++;
    return indentedLine;
  }).join('\n');

  return sql;
}

const dirtySQL = `
/*
  This is a multi-line comment.
*/
SELECT  id, name ,  \nvalue -- This is a single-line comment
\nFROM   my_table 
WHERE value > 10   AND status = 'active';

select COUNT(*) FROM another_table; -- another comment
`;

const cleanSQLResult = cleanSQL(dirtySQL);
console.log(cleanSQLResult);



import { useState } from "react";

const DataTable = ({ data, rowsPerPage = 5 }: { data: any[]; rowsPerPage?: number }) => {
  const [currentPage, setCurrentPage] = useState(1);
  const totalPages = Math.ceil(data.length / rowsPerPage);

  // Slice data for current page
  const paginatedData = data.slice((currentPage - 1) * rowsPerPage, currentPage * rowsPerPage);

  // Pagination handlers
  const goToPage = (page: number) => setCurrentPage(page);
  const nextPage = () => setCurrentPage((prev) => Math.min(prev + 1, totalPages));
  const prevPage = () => setCurrentPage((prev) => Math.max(prev - 1, 1));

  return (
    <div className="max-w-4xl mx-auto p-4 bg-white shadow-md rounded-lg">
      <h2 className="text-lg font-semibold mb-3">Condensed Table</h2>

      {/* Table Wrapper for Responsive Scroll */}
      <div className="overflow-x-auto">
        <table className="w-full text-sm border-collapse border border-gray-300">
          <thead className="bg-blue-600 text-white text-left">
            <tr>
              <th className="px-2 py-2 border">ID</th>
              <th className="px-2 py-2 border">Name</th>
              <th className="px-2 py-2 border">Email</th>
            </tr>
          </thead>
          <tbody>
            {paginatedData.map((item) => (
              <tr key={item.id} className="odd:bg-gray-100 even:bg-gray-50">
                <td className="px-2 py-2 border">{item.id}</td>
                <td className="px-2 py-2 border">{item.name}</td>
                <td className="px-2 py-2 border">{item.email}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      <div className="flex justify-between items-center mt-3">
        <button
          onClick={prevPage}
          disabled={currentPage === 1}
          className="px-3 py-1 bg-gray-300 rounded disabled:opacity-50"
        >
          Prev
        </button>

        <div className="flex gap-1">
          {Array.from({ length: totalPages }, (_, i) => (
            <button
              key={i + 1}
              onClick={() => goToPage(i + 1)}
              className={`px-2 py-1 rounded text-sm ${
                currentPage === i + 1 ? "bg-blue-600 text-white" : "bg-gray-300"
              }`}
            >
              {i + 1}
            </button>
          ))}
        </div>

        <button
          onClick={nextPage}
          disabled={currentPage === totalPages}
          className="px-3 py-1 bg-gray-300 rounded disabled:opacity-50"
        >
          Next
        </button>
      </div>
    </div>
  );
};

// Example usage
const App = () => {
  const sampleData = Array.from({ length: 20 }, (_, i) => ({
    id: i + 1,
    name: `User ${i + 1}`,
    email: `user${i + 1}@example.com`,
  }));

  return <DataTable data={sampleData} />;
};

export default App;

